<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="io.factorialsystems.msscusers.dao.UserMapper">
    <resultMap id="userResultMap" type="io.factorialsystems.msscusers.domain.User">
        <id column="id" property="id" jdbcType="VARCHAR" />
        <result column="user_name" property="username" jdbcType="VARCHAR"/>
        <result column="first_name" property="firstName" jdbcType="VARCHAR"/>
        <result column="last_name" property="lastName" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="enabled" property="enabled" jdbcType="BOOLEAN"/>
        <result column="email_verified" property="emailVerified" jdbcType="VARCHAR"/>
        <result column="created_date" property="createdDate" jdbcType="TIMESTAMP"/>
        <result column="wallet_id" property="walletId" jdbcType="VARCHAR"/>
        <result column="organization_id" property="organizationId" jdbcType="VARCHAR"/>
        <result column="profile_picture" property="profilePicture" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="userEntryResultMap" type="io.factorialsystems.msscusers.dto.UserEntryDto">
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="user_name" property="name" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Column_List_Long">
       id, user_name, first_name, last_name, email, enabled, email_verified, created_date, wallet_id, organization_id, profile_picture
    </sql>

    <sql id="Column_List_Short">
        id, user_name, first_name, last_name, email, enabled, email_verified, created_date
    </sql>

    <select id="findAll" resultMap="userResultMap">
        select
        <include refid="Column_List_Short"/>
        from users
    </select>

    <select id="findAllList" resultMap="userResultMap">
        select
        <include refid="Column_List_Short"/>
        from users
    </select>

    <select id="findAdminUser" resultMap="userResultMap">
        select
        <include refid="Column_List_Short"/>
        from users u, user_roles r
        where u.id = r.user_id
        and r.role_id in (select id from roles where role_group = 1)
    </select>

    <select id="findOrdinaryUser" resultMap="userResultMap">
        select
        <include refid="Column_List_Short"/>
        from users
        where id not in  (select user_id from user_roles)
    </select>

    <select id="findByName" resultMap="userResultMap">
        select
        <include refid="Column_List_Short"/>
        from users where user_name = #{name}
    </select>

    <select id="search" parameterType="io.factorialsystems.msscusers.domain.search.SearchUserDto" resultMap="userResultMap">
        select
        <include refid="Column_List_Short"/>
        from users
        where (user_name like CONCAT(#{search}, '%')
        or
        email like CONCAT(#{search}, '%')
        or
        first_name like CONCAT(#{search}, '%')
        or
        last_name like CONCAT(#{search}, '%'))

        <if test="ordinary != null">
            and id not in (select user_id from user_roles)
        </if>

        <if test="admin != null">
            and id in (select ur.user_id from user_roles ur, roles r where ur.role_id = r.id and r.role_group = 1)
        </if>
    </select>

    <select id="findUserById" parameterType="java.lang.String" resultMap="userResultMap">
        select
        <include refid="Column_List_Long"/>
        from users where id = #{id}
    </select>

    <select id="findUserByIdOrNameOrEmail" parameterType="java.lang.String" resultMap="userResultMap">
        select
        <include refid="Column_List_Long"/>
        from users
        where id = #{id}
        or user_name = #{id}
        or email = #{id}
    </select>

    <select id="findUserByOrganizationId" parameterType="java.lang.String" resultMap="userResultMap">
        select
        <include refid="Column_List_Long"/>
        from users where organization_id = #{id}
    </select>

    <select id="findUserForOrganization" resultMap="userResultMap">
        select
        <include refid="Column_List_Short"/>
        from users where organization_id is null
    </select>

    <insert id="save" parameterType="io.factorialsystems.msscusers.domain.User">
        insert into users(id, user_name, first_name, last_name, email, enabled, email_verified, wallet_id)
        values (
                #{id, jdbcType=VARCHAR}, #{username, jdbcType=VARCHAR},
                #{firstName, jdbcType=VARCHAR}, #{lastName, jdbcType=VARCHAR},
                #{email, jdbcType=VARCHAR}, #{enabled, jdbcType=BOOLEAN},
                #{emailVerified, jdbcType=BOOLEAN}, #{walletId, jdbcType=VARCHAR}
        )
    </insert>

    <update id="update" parameterType="io.factorialsystems.msscusers.domain.User">
        update users
        <set>
            <if test="firstName != null">first_name=#{firstName},</if>
            <if test="lastName != null">last_name=#{lastName},</if>
            <if test="walletId != null">wallet_id=#{walletId},</if>
            <if test="secret != null">secret=#{secret},</if>
            <if test="organizationId != null">organization_id=#{organizationId},</if>
            <if test="profilePicture != null">profile_picture=#{profilePicture},</if>
            <if test="enabled != null">enabled=#{enabled}</if>
        </set>
        where id = #{id}
    </update>

    <update id="removeOrganization" parameterType="java.lang.String">
        update users set organization_id = null where id = #{id}
    </update>

    <update id="updateProfilePicture" parameterType="java.util.Map">
        update users set profile_picture = #{picture} where id = #{id}
    </update>

    <insert id="addRoles" parameterType="java.util.List">
        insert into user_roles(role_id, user_id) values
        <foreach item="item" index="index" collection="list"  separator=",">
            (#{item.roleId, jdbcType=VARCHAR}, #{item.userId, jdbcType=VARCHAR})
        </foreach>
    </insert>

    <select id="getUserNamesFromIds" resultMap="userEntryResultMap">
        select id, user_name from users where
            id in
            <if test="ids != null and ids.size > 0">
                <foreach item="item" index="index" collection="ids" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
    </select>

    <delete id="removeRole" parameterType="io.factorialsystems.msscusers.mapper.dbtransfer.RoleParameter">
       delete from user_roles where user_id = #{userId} and role_id = #{roleId}
    </delete>
</mapper>
