<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="io.factorialsystems.msscwallet.dao.AccountMapper">
    <resultMap id="accountResultMap" type="io.factorialsystems.msscwallet.domain.Account">
        <id column="id" property="id" jdbcType="VARCHAR" />
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="VARCHAR"/>
        <result column="account_type" property="accountType" jdbcType="INTEGER"/>
        <result column="balance" property="balance" jdbcType="DECIMAL"/>
        <result column="activated" property="activated" jdbcType="BOOLEAN"/>
        <result column="createdAt" property="createdDate" jdbcType="TIMESTAMP"/>
        <result column="createdBy" property="createdBy" jdbcType="VARCHAR"/>
        <result column="charge_account" property="chargeAccountId" jdbcType="VARCHAR"/>
        <result column="web_hook" property="webHook" jdbcType="VARCHAR"/>
        <result column="kyc_verified" property="kycVerified" jdbcType="BOOLEAN"/>
        <result column="daily_limit" property="dailyLimit" jdbcType="DECIMAL"/>
    </resultMap>

    <resultMap id="shortAccountResultMap" type="io.factorialsystems.msscwallet.dto.AccountBalanceDto">
        <id column="id" property="accountId" jdbcType="VARCHAR" />
        <result column="user_id" property="userId" jdbcType="VARCHAR"/>
        <result column="balance" property="balance" jdbcType="DECIMAL"/>
    </resultMap>

    <sql id="Column_List">
        id, name, balance, user_id, account_type, activated, createdAt, createdBy, charge_account, web_hook, kyc_verified, daily_limit
    </sql>

    <sql id="short_column_list">
        id, user_id, balance
    </sql>

    <select id="findAccounts" resultMap="accountResultMap">
        select
        <include refid="Column_List"/>
        from accounts
        where anonymous = false
    </select>

    <select id="findUserBalances" resultMap="shortAccountResultMap">
        select
        <include refid="short_column_list"/>
        from accounts
    </select>


    <select id="findBalances" resultMap="shortAccountResultMap">
        select
        <include refid="short_column_list"/>
        from accounts
        <if test="ids != null and ids.size > 0">
            where user_id in
            <foreach item="item" index="index" collection="ids" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
    </select>

    <select id="findAccountById" parameterType="java.lang.String" resultMap="accountResultMap">
        select
        <include refid="Column_List"/>
        from accounts where id = #{id}
    </select>

    <select id="findAccountByIdForUpdate" parameterType="java.lang.String" resultMap="accountResultMap">
        select
        <include refid="Column_List"/>
        from accounts where id = #{id} for update
    </select>

    <select id="findAccountByUserId" parameterType="java.lang.String" resultMap="accountResultMap">
        select
        <include refid="Column_List"/>
        from accounts
        where user_id = #{id} and account_type = 1
    </select>

    <select id="findAccountByUserIdForUpdate" parameterType="java.lang.String" resultMap="accountResultMap">
        select
        <include refid="Column_List"/>
        from accounts
        where user_id = #{id} and account_type = 1 for update
    </select>

    <select id="findActiveAccountByUserIdForUpdate" parameterType="java.lang.String" resultMap="accountResultMap">
        {call sp_GetActiveAccountByUserIdForUpdate(#{id})}
    </select>
    <select id="findAnonymousAccount"  resultMap="accountResultMap">
        select
        <include refid="Column_List"/>
        from accounts
        where anonymous = true
    </select>

    <select id="findAccountByCorporateId" parameterType="java.lang.String" resultMap="accountResultMap">
        select
        <include refid="Column_List"/>
        from accounts
        where user_id = #{id} and account_type = 2
    </select>

    <select id="findLowThresholdAccounts" resultMap="accountResultMap">
        select
        <include refid="Column_List"/>
        from accounts
        where threshold_level > balance
    </select>

    <select id="findAccountByProviderId" parameterType="java.lang.String" resultMap="accountResultMap">
        select
        <include refid="Column_List"/>
        from accounts
        where user_id = #{id} and account_type = 3
    </select>

    <insert id="save" parameterType="io.factorialsystems.msscwallet.domain.Account">
        insert into accounts(id, name, createdBy, user_id, account_type) values
        (#{id, jdbcType=VARCHAR}, #{name, jdbcType=VARCHAR}, #{createdBy, jdbcType=VARCHAR}, #{userId, jdbcType=VARCHAR}, #{accountType, jdbcType=INTEGER})
    </insert>

    <update id="verifyAccount" parameterType="java.util.Map">
        update accounts
        set kyc_verified = true,
        telephone = #{telephone}
        where id = #{id};
    </update>

    <update id="unVerifyAccount" parameterType="java.lang.String">
        update accounts set kyc_verified = false where id = #{id}
    </update>

    <update id="changeBalance" parameterType="io.factorialsystems.msscwallet.domain.Account">
        update accounts
        <set>
            <if test="balance != null">balance=#{balance},</if>
        </set>
        where id = #{id}
    </update>

    <update id="deleteAccount" parameterType="java.util.Map">
        update accounts set deleted = true, deleted_by = #{deletedBy}, deleted_date = NOW() where id = #{id}
    </update>

    <update id="addOrganizationWallet" parameterType="java.util.Map">
        update accounts set charge_account = #{organizationId} where id = #{id}
    </update>

    <update id="removeOrganizationWallet" parameterType="java.lang.String">
        update accounts set charge_account = null where user_id = #{id}
    </update>

    <update id="changeDailyLimit" parameterType="io.factorialsystems.msscwallet.domain.Account">
        update accounts set daily_limit = #{dailyLimit} where id = #{id}
    </update>
</mapper>
